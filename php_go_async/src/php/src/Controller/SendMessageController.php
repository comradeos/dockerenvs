<?php

namespace App\Controller;

use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

final class SendMessageController extends AbstractController
{
    #[Route('/send/message', name: 'app_send_message')]
    public function index(): Response
    {
        // Получаем параметр msg из запроса
        $msgText = $_GET['msg'] ?? 'no msg provided';

        // Подключение к RabbitMQ.
        // Если вы используете docker-compose, то имя хоста для RabbitMQ – это имя сервиса (в вашем случае "rabbitmq")
        $connection = new AMQPStreamConnection('rabbitmq', 5672, 'user', 'password');
        $channel = $connection->channel();

        // Объявляем очередь, если она еще не существует.
        $queueName = 'my_queue';
        $channel->queue_declare($queueName, false, false, false, false); // имя очереди, пассивная, долговечная, автоудаление, аргументы

        /*
        Метод queue_declare сообщает серверу RabbitMQ, что вы хотите использовать очередь с именем, указанным в первом параметре ($queueName). Если такой очереди ещё нет, то сервер создаст её с указанными параметрами.

        Параметры метода:

        Первый параметр ($queueName):
        Имя очереди, с которой мы будем работать. В данном случае это строка "my_queue".

        Второй параметр (passive):
        Значение false означает, что мы не запускаем пассивное объявление очереди. Если бы здесь было true, то сервер только проверил бы наличие очереди, но не создавал бы её, если она отсутствует. Использование false позволяет создать очередь, если её не существует.

        Третий параметр (durable):
        Значение false указывает, что очередь не является долговечной (не сохраняется после перезапуска сервера). Если установить true, очередь будет сохраняться, даже если сервер RabbitMQ перезапустится.

        Четвертый параметр (exclusive):
        Значение false означает, что очередь не является эксклюзивной для текущего соединения. Эксклюзивная очередь может использоваться только текущим соединением и будет удалена, когда соединение разорвётся.
        Если бы значение было true, очередь стала бы доступной только в пределах данного соединения.

        Пятый параметр (auto_delete):
        Значение false означает, что очередь не будет автоматически удалена, когда больше не будет к ней привязанных подписчиков. Если установить true, очередь удалится, как только последний потребитель отпишется.

        Шестой параметр (arguments):
        Дополнительные аргументы для создания очереди. В нашем случае он не используется (передаётся null или пустой массив).
*/

        // Создаем сообщение
        $message = new AMQPMessage($msgText);

        // Отправляем сообщение в указанную очередь
        $channel->basic_publish($message, '', $queueName); // сообщение, обменник, ключ маршрутизации
        /*
        Метод basic_publish отвечает за отправку (публикацию) сообщения в RabbitMQ.

        Параметры метода:

        Первый параметр ($message):
        Это объект сообщения, который мы создали на предыдущем шаге.

        Второй параметр (Exchange):
        Здесь передаётся пустая строка ''. Это означает, что сообщение отправляется через стандартный (дефолтный) обменник.
        В RabbitMQ стандартный обменник имеет особенность: он автоматически доставляет сообщение в очередь, имя которой совпадает с ключом маршрутизации.

        Третий параметр (Routing key):
        Значение $queueName указывает ключ маршрутизации. При использовании стандартного обменника ключ маршрутизации должен совпадать с именем очереди, в которую вы хотите отправить сообщение.
        Таким образом, сообщение будет доставлено непосредственно в очередь "my_queue".
        */



        // Закрываем канал и соединение
        $channel->close();
        $connection->close();

        // Возвращаем ответ клиенту
        return $this->json([
            'message' => 'Message sent: ' . $msgText,
        ]);
    }
}
